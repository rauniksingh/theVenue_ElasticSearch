{"version":3,"sources":["../../src/factories/createLightship.js"],"names":["log","Logger","child","namespace","defaultConfiguration","port","signals","userConfiguration","shutdownHandlers","configuration","app","server","listen","serverIsReady","serverIsShuttingDown","get","req","res","status","send","SERVER_IS_SHUTTING_DOWN","SERVER_IS_READY","SERVER_IS_NOT_READY","SERVER_IS_NOT_SHUTTING_DOWN","signalNotReady","warn","info","signalReady","shutdown","shutdownHandler","error","debug","close","process","exit","signal","on","registerShutdownHandler","push"],"mappings":"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","sourcesContent":["// @flow\n\nimport express from 'express';\nimport serializeError from 'serialize-error';\nimport Logger from '../Logger';\nimport type {\n  ShutdownHandlerType,\n  LightshipConfigurationType,\n  LightshipType\n} from '../types';\nimport {\n  SERVER_IS_NOT_READY,\n  SERVER_IS_NOT_SHUTTING_DOWN,\n  SERVER_IS_READY,\n  SERVER_IS_SHUTTING_DOWN\n} from '../states';\n\nconst log = Logger.child({\n  namespace: 'factories/createLightship'\n});\n\nconst defaultConfiguration = {\n  port: 9000,\n  signals: [\n    'SIGTERM',\n    'SIGHUP',\n    'SIGINT'\n  ]\n};\n\nexport default (userConfiguration?: LightshipConfigurationType): LightshipType => {\n  const shutdownHandlers: Array<ShutdownHandlerType> = [];\n\n  const configuration = {\n    ...defaultConfiguration,\n    ...userConfiguration\n  };\n\n  const app = express();\n\n  const server = app.listen(configuration.port);\n\n  let serverIsReady = false;\n  let serverIsShuttingDown = false;\n\n  app.get('/health', (req, res) => {\n    if (serverIsShuttingDown) {\n      res.status(500).send(SERVER_IS_SHUTTING_DOWN);\n    } else if (serverIsReady) {\n      res.send(SERVER_IS_READY);\n    } else {\n      res.status(500).send(SERVER_IS_NOT_READY);\n    }\n  });\n\n  app.get('/live', (req, res) => {\n    if (serverIsShuttingDown) {\n      res.status(500).send(SERVER_IS_SHUTTING_DOWN);\n    } else {\n      res.send(SERVER_IS_NOT_SHUTTING_DOWN);\n    }\n  });\n\n  app.get('/ready', (req, res) => {\n    if (serverIsReady) {\n      res.send(SERVER_IS_READY);\n    } else {\n      res.status(500).send(SERVER_IS_NOT_READY);\n    }\n  });\n\n  const signalNotReady = () => {\n    if (serverIsShuttingDown) {\n      log.warn('server is already shutting down');\n\n      return;\n    }\n\n    if (serverIsReady === false) {\n      log.warn('server is already is a NOT READY state');\n    }\n\n    log.info('signaling that the server is not ready to accept connections');\n\n    serverIsReady = false;\n  };\n\n  const signalReady = () => {\n    if (serverIsShuttingDown) {\n      log.warn('server is already shutting down');\n\n      return;\n    }\n\n    log.info('signaling that the server is ready to accept connections');\n\n    serverIsReady = true;\n  };\n\n  const shutdown = async () => {\n    if (serverIsShuttingDown) {\n      log.warn('server is already shutting down');\n\n      return;\n    }\n\n    serverIsReady = false;\n    serverIsShuttingDown = true;\n\n    for (const shutdownHandler of shutdownHandlers) {\n      try {\n        await shutdownHandler();\n      } catch (error) {\n        log.error({\n          error: serializeError(error)\n        }, 'shutdown handler produced an error');\n      }\n    }\n\n    log.debug('all shutdown handlers have run to completion; proceeding to terminate the Node.js process');\n\n    server.close();\n\n    // eslint-disable-next-line no-process-exit\n    process.exit();\n  };\n\n  for (const signal of configuration.signals) {\n    process.on(signal, () => {\n      log.debug({\n        signal\n      }, 'received a shutdown signal');\n\n      shutdown();\n    });\n  }\n\n  return {\n    registerShutdownHandler: (shutdownHandler) => {\n      shutdownHandlers.push(shutdownHandler);\n    },\n    shutdown,\n    signalNotReady,\n    signalReady\n  };\n};\n"],"file":"createLightship.js"}